// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=.ts"
// @generated from file plugnmeet_datamessage.proto (package plugnmeet, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobufv1';
import { Message, proto3 } from '@bufbuild/protobufv1';

/**
 * @generated from enum plugnmeet.DataMsgBodyType
 */
export enum DataMsgBodyType {
  /**
   * SYSTEM type
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: FILE_UPLOAD = 1;
   */
  FILE_UPLOAD = 1,

  /**
   * @generated from enum value: INFO = 2;
   */
  INFO = 2,

  /**
   * @generated from enum value: ALERT = 3;
   */
  ALERT = 3,

  /**
   * @generated from enum value: USER_VISIBILITY_CHANGE = 6;
   */
  USER_VISIBILITY_CHANGE = 6,

  /**
   * @generated from enum value: EXTERNAL_MEDIA_PLAYER_EVENTS = 7;
   */
  EXTERNAL_MEDIA_PLAYER_EVENTS = 7,

  /**
   * @generated from enum value: NEW_POLL_RESPONSE = 8;
   */
  NEW_POLL_RESPONSE = 8,

  /**
   * @generated from enum value: SPEECH_SUBTITLE_TEXT = 9;
   */
  SPEECH_SUBTITLE_TEXT = 9,

  /**
   * WHITEBOARD type
   *
   * @generated from enum value: REQ_INIT_WHITEBOARD_DATA = 10;
   */
  REQ_INIT_WHITEBOARD_DATA = 10,

  /**
   * @generated from enum value: SCENE_UPDATE = 11;
   */
  SCENE_UPDATE = 11,

  /**
   * @generated from enum value: POINTER_UPDATE = 12;
   */
  POINTER_UPDATE = 12,

  /**
   * @generated from enum value: ADD_WHITEBOARD_FILE = 13;
   */
  ADD_WHITEBOARD_FILE = 13,

  /**
   * @generated from enum value: ADD_WHITEBOARD_OFFICE_FILE = 14;
   */
  ADD_WHITEBOARD_OFFICE_FILE = 14,

  /**
   * @generated from enum value: PAGE_CHANGE = 15;
   */
  PAGE_CHANGE = 15,

  /**
   * @generated from enum value: WHITEBOARD_APP_STATE_CHANGE = 16;
   */
  WHITEBOARD_APP_STATE_CHANGE = 16,
}
// Retrieve enum metadata with: proto3.getEnumType(DataMsgBodyType)
proto3.util.setEnumType(DataMsgBodyType, 'plugnmeet.DataMsgBodyType', [
  { no: 0, name: 'UNKNOWN' },
  { no: 1, name: 'FILE_UPLOAD' },
  { no: 2, name: 'INFO' },
  { no: 3, name: 'ALERT' },
  { no: 6, name: 'USER_VISIBILITY_CHANGE' },
  { no: 7, name: 'EXTERNAL_MEDIA_PLAYER_EVENTS' },
  { no: 8, name: 'NEW_POLL_RESPONSE' },
  { no: 9, name: 'SPEECH_SUBTITLE_TEXT' },
  { no: 10, name: 'REQ_INIT_WHITEBOARD_DATA' },
  { no: 11, name: 'SCENE_UPDATE' },
  { no: 12, name: 'POINTER_UPDATE' },
  { no: 13, name: 'ADD_WHITEBOARD_FILE' },
  { no: 14, name: 'ADD_WHITEBOARD_OFFICE_FILE' },
  { no: 15, name: 'PAGE_CHANGE' },
  { no: 16, name: 'WHITEBOARD_APP_STATE_CHANGE' },
]);

/**
 * @generated from message plugnmeet.DataChannelMessage
 */
export class DataChannelMessage extends Message<DataChannelMessage> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  /**
   * @generated from field: plugnmeet.DataMsgBodyType type = 2;
   */
  type = DataMsgBodyType.UNKNOWN;

  /**
   * @generated from field: string from_user_id = 3;
   */
  fromUserId = '';

  /**
   * @generated from field: optional string to_user_id = 4;
   */
  toUserId?: string;

  /**
   * @generated from field: string message = 5;
   */
  message = '';

  constructor(data?: PartialMessage<DataChannelMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'plugnmeet.DataChannelMessage';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'type',
      kind: 'enum',
      T: proto3.getEnumType(DataMsgBodyType),
    },
    {
      no: 3,
      name: 'from_user_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 4,
      name: 'to_user_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
    { no: 5, name: 'message', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DataChannelMessage {
    return new DataChannelMessage().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DataChannelMessage {
    return new DataChannelMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DataChannelMessage {
    return new DataChannelMessage().fromJsonString(jsonString, options);
  }

  static equals(
    a: DataChannelMessage | PlainMessage<DataChannelMessage> | undefined,
    b: DataChannelMessage | PlainMessage<DataChannelMessage> | undefined,
  ): boolean {
    return proto3.util.equals(DataChannelMessage, a, b);
  }
}
