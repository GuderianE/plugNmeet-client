// @generated by protoc-gen-es v1.3.0 with parameter "target=ts,import_extension=.ts"
// @generated from file plugnmeet_analytics.proto (package plugnmeet, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';

/**
 * @generated from enum plugnmeet.AnalyticsEventType
 */
export enum AnalyticsEventType {
  /**
   * @generated from enum value: ANALYTICS_EVENT_TYPE_ROOM = 0;
   */
  ROOM = 0,

  /**
   * @generated from enum value: ANALYTICS_EVENT_TYPE_USER = 1;
   */
  USER = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(AnalyticsEventType)
proto3.util.setEnumType(AnalyticsEventType, 'plugnmeet.AnalyticsEventType', [
  { no: 0, name: 'ANALYTICS_EVENT_TYPE_ROOM' },
  { no: 1, name: 'ANALYTICS_EVENT_TYPE_USER' },
]);

/**
 * @generated from enum plugnmeet.AnalyticsEvents
 */
export enum AnalyticsEvents {
  /**
   * @generated from enum value: ANALYTICS_EVENT_UNKNOWN = 0;
   */
  ANALYTICS_EVENT_UNKNOWN = 0,

  /**
   * room related
   *
   * @generated from enum value: ANALYTICS_EVENT_ROOM_POLL_ADDED = 1;
   */
  ANALYTICS_EVENT_ROOM_POLL_ADDED = 1,

  /**
   * user join will be room related
   * after take record it will pass to user
   *
   * @generated from enum value: ANALYTICS_EVENT_USER_JOINED = 2;
   */
  ANALYTICS_EVENT_USER_JOINED = 2,

  /**
   * room recorder
   *
   * @generated from enum value: ANALYTICS_EVENT_ROOM_RECORDING_STARTED = 3;
   */
  ANALYTICS_EVENT_ROOM_RECORDING_STARTED = 3,

  /**
   * @generated from enum value: ANALYTICS_EVENT_ROOM_RECORDING_ENDED = 4;
   */
  ANALYTICS_EVENT_ROOM_RECORDING_ENDED = 4,

  /**
   * @generated from enum value: ANALYTICS_EVENT_ROOM_RTMP_STARTED = 5;
   */
  ANALYTICS_EVENT_ROOM_RTMP_STARTED = 5,

  /**
   * @generated from enum value: ANALYTICS_EVENT_ROOM_RTMP_ENDED = 6;
   */
  ANALYTICS_EVENT_ROOM_RTMP_ENDED = 6,

  /**
   * @generated from enum value: ANALYTICS_EVENT_ROOM_BREAKOUT_ROOM = 7;
   */
  ANALYTICS_EVENT_ROOM_BREAKOUT_ROOM = 7,

  /**
   * @generated from enum value: ANALYTICS_EVENT_ROOM_ETHERPAD_ENABLED = 8;
   */
  ANALYTICS_EVENT_ROOM_ETHERPAD_ENABLED = 8,

  /**
   * @generated from enum value: ANALYTICS_EVENT_ROOM_ETHERPAD_DISABLED = 9;
   */
  ANALYTICS_EVENT_ROOM_ETHERPAD_DISABLED = 9,

  /**
   * @generated from enum value: ANALYTICS_EVENT_ROOM_EXTERNAL_DISPLAY_LINK_STARTED = 10;
   */
  ANALYTICS_EVENT_ROOM_EXTERNAL_DISPLAY_LINK_STARTED = 10,

  /**
   * @generated from enum value: ANALYTICS_EVENT_ROOM_EXTERNAL_DISPLAY_LINK_ENDED = 11;
   */
  ANALYTICS_EVENT_ROOM_EXTERNAL_DISPLAY_LINK_ENDED = 11,

  /**
   * @generated from enum value: ANALYTICS_EVENT_ROOM_EXTERNAL_MEDIA_PLAYER_STARTED = 12;
   */
  ANALYTICS_EVENT_ROOM_EXTERNAL_MEDIA_PLAYER_STARTED = 12,

  /**
   * @generated from enum value: ANALYTICS_EVENT_ROOM_EXTERNAL_MEDIA_PLAYER_ENDED = 13;
   */
  ANALYTICS_EVENT_ROOM_EXTERNAL_MEDIA_PLAYER_ENDED = 13,

  /**
   * @generated from enum value: ANALYTICS_EVENT_ROOM_SPEECH_SERVICE_STARTED = 14;
   */
  ANALYTICS_EVENT_ROOM_SPEECH_SERVICE_STARTED = 14,

  /**
   * @generated from enum value: ANALYTICS_EVENT_ROOM_SPEECH_SERVICE_ENDED = 15;
   */
  ANALYTICS_EVENT_ROOM_SPEECH_SERVICE_ENDED = 15,

  /**
   * @generated from enum value: ANALYTICS_EVENT_ROOM_SPEECH_SERVICE_TOTAL_USAGE = 35;
   */
  ANALYTICS_EVENT_ROOM_SPEECH_SERVICE_TOTAL_USAGE = 35,

  /**
   * @generated from enum value: ANALYTICS_EVENT_ROOM_INGRESS_CREATED = 16;
   */
  ANALYTICS_EVENT_ROOM_INGRESS_CREATED = 16,

  /**
   * here all related with user
   *
   * @generated from enum value: ANALYTICS_EVENT_USER_LEFT = 17;
   */
  ANALYTICS_EVENT_USER_LEFT = 17,

  /**
   * microphone
   *
   * @generated from enum value: ANALYTICS_EVENT_USER_STARTED_MIC = 18;
   */
  ANALYTICS_EVENT_USER_STARTED_MIC = 18,

  /**
   * @generated from enum value: ANALYTICS_EVENT_USER_STOPPED_MIC = 19;
   */
  ANALYTICS_EVENT_USER_STOPPED_MIC = 19,

  /**
   * @generated from enum value: ANALYTICS_EVENT_USER_MUTED_MIC = 20;
   */
  ANALYTICS_EVENT_USER_MUTED_MIC = 20,

  /**
   * @generated from enum value: ANALYTICS_EVENT_USER_UNMUTED_MIC = 21;
   */
  ANALYTICS_EVENT_USER_UNMUTED_MIC = 21,

  /**
   * webcam
   *
   * @generated from enum value: ANALYTICS_EVENT_USER_STARTED_WEBCAM = 22;
   */
  ANALYTICS_EVENT_USER_STARTED_WEBCAM = 22,

  /**
   * @generated from enum value: ANALYTICS_EVENT_USER_STOPPED_WEBCAM = 23;
   */
  ANALYTICS_EVENT_USER_STOPPED_WEBCAM = 23,

  /**
   * screen share
   *
   * @generated from enum value: ANALYTICS_EVENT_USER_STARTED_SCREEN_SHARE = 24;
   */
  ANALYTICS_EVENT_USER_STARTED_SCREEN_SHARE = 24,

  /**
   * @generated from enum value: ANALYTICS_EVENT_USER_STOPPED_SCREEN_SHARE = 25;
   */
  ANALYTICS_EVENT_USER_STOPPED_SCREEN_SHARE = 25,

  /**
   * polls
   *
   * @generated from enum value: ANALYTICS_EVENT_USER_VOTED_POLL = 26;
   */
  ANALYTICS_EVENT_USER_VOTED_POLL = 26,

  /**
   * chat
   *
   * @generated from enum value: ANALYTICS_EVENT_USER_PUBLIC_CHAT = 27;
   */
  ANALYTICS_EVENT_USER_PUBLIC_CHAT = 27,

  /**
   * @generated from enum value: ANALYTICS_EVENT_USER_PRIVATE_CHAT = 28;
   */
  ANALYTICS_EVENT_USER_PRIVATE_CHAT = 28,

  /**
   * @generated from enum value: ANALYTICS_EVENT_USER_CHAT_FILES = 29;
   */
  ANALYTICS_EVENT_USER_CHAT_FILES = 29,

  /**
   * whiteboard
   *
   * @generated from enum value: ANALYTICS_EVENT_USER_WHITEBOARD_ANNOTATED = 30;
   */
  ANALYTICS_EVENT_USER_WHITEBOARD_ANNOTATED = 30,

  /**
   * @generated from enum value: ANALYTICS_EVENT_USER_WHITEBOARD_FILES_ADDED = 31;
   */
  ANALYTICS_EVENT_USER_WHITEBOARD_FILES_ADDED = 31,

  /**
   * etc
   *
   * @generated from enum value: ANALYTICS_EVENT_USER_INVISIBLE_INTERFACE = 32;
   */
  ANALYTICS_EVENT_USER_INVISIBLE_INTERFACE = 32,

  /**
   * @generated from enum value: ANALYTICS_EVENT_USER_RAISE_HAND = 33;
   */
  ANALYTICS_EVENT_USER_RAISE_HAND = 33,

  /**
   * @generated from enum value: ANALYTICS_EVENT_USER_SPEECH_SERVICES_USAGE = 34;
   */
  ANALYTICS_EVENT_USER_SPEECH_SERVICES_USAGE = 34,

  /**
   * @generated from enum value: ANALYTICS_EVENT_USER_SPEECH_SERVICES_STARTED = 36;
   */
  ANALYTICS_EVENT_USER_SPEECH_SERVICES_STARTED = 36,

  /**
   * @generated from enum value: ANALYTICS_EVENT_USER_SPEECH_SERVICES_ENDED = 37;
   */
  ANALYTICS_EVENT_USER_SPEECH_SERVICES_ENDED = 37,

  /**
   * @generated from enum value: ANALYTICS_EVENT_USER_CONNECTION_QUALITY_EXCELLENT = 38;
   */
  ANALYTICS_EVENT_USER_CONNECTION_QUALITY_EXCELLENT = 38,

  /**
   * @generated from enum value: ANALYTICS_EVENT_USER_CONNECTION_QUALITY_GOOD = 39;
   */
  ANALYTICS_EVENT_USER_CONNECTION_QUALITY_GOOD = 39,

  /**
   * @generated from enum value: ANALYTICS_EVENT_USER_CONNECTION_QUALITY_POOR = 40;
   */
  ANALYTICS_EVENT_USER_CONNECTION_QUALITY_POOR = 40,
}
// Retrieve enum metadata with: proto3.getEnumType(AnalyticsEvents)
proto3.util.setEnumType(AnalyticsEvents, 'plugnmeet.AnalyticsEvents', [
  { no: 0, name: 'ANALYTICS_EVENT_UNKNOWN' },
  { no: 1, name: 'ANALYTICS_EVENT_ROOM_POLL_ADDED' },
  { no: 2, name: 'ANALYTICS_EVENT_USER_JOINED' },
  { no: 3, name: 'ANALYTICS_EVENT_ROOM_RECORDING_STARTED' },
  { no: 4, name: 'ANALYTICS_EVENT_ROOM_RECORDING_ENDED' },
  { no: 5, name: 'ANALYTICS_EVENT_ROOM_RTMP_STARTED' },
  { no: 6, name: 'ANALYTICS_EVENT_ROOM_RTMP_ENDED' },
  { no: 7, name: 'ANALYTICS_EVENT_ROOM_BREAKOUT_ROOM' },
  { no: 8, name: 'ANALYTICS_EVENT_ROOM_ETHERPAD_ENABLED' },
  { no: 9, name: 'ANALYTICS_EVENT_ROOM_ETHERPAD_DISABLED' },
  { no: 10, name: 'ANALYTICS_EVENT_ROOM_EXTERNAL_DISPLAY_LINK_STARTED' },
  { no: 11, name: 'ANALYTICS_EVENT_ROOM_EXTERNAL_DISPLAY_LINK_ENDED' },
  { no: 12, name: 'ANALYTICS_EVENT_ROOM_EXTERNAL_MEDIA_PLAYER_STARTED' },
  { no: 13, name: 'ANALYTICS_EVENT_ROOM_EXTERNAL_MEDIA_PLAYER_ENDED' },
  { no: 14, name: 'ANALYTICS_EVENT_ROOM_SPEECH_SERVICE_STARTED' },
  { no: 15, name: 'ANALYTICS_EVENT_ROOM_SPEECH_SERVICE_ENDED' },
  { no: 35, name: 'ANALYTICS_EVENT_ROOM_SPEECH_SERVICE_TOTAL_USAGE' },
  { no: 16, name: 'ANALYTICS_EVENT_ROOM_INGRESS_CREATED' },
  { no: 17, name: 'ANALYTICS_EVENT_USER_LEFT' },
  { no: 18, name: 'ANALYTICS_EVENT_USER_STARTED_MIC' },
  { no: 19, name: 'ANALYTICS_EVENT_USER_STOPPED_MIC' },
  { no: 20, name: 'ANALYTICS_EVENT_USER_MUTED_MIC' },
  { no: 21, name: 'ANALYTICS_EVENT_USER_UNMUTED_MIC' },
  { no: 22, name: 'ANALYTICS_EVENT_USER_STARTED_WEBCAM' },
  { no: 23, name: 'ANALYTICS_EVENT_USER_STOPPED_WEBCAM' },
  { no: 24, name: 'ANALYTICS_EVENT_USER_STARTED_SCREEN_SHARE' },
  { no: 25, name: 'ANALYTICS_EVENT_USER_STOPPED_SCREEN_SHARE' },
  { no: 26, name: 'ANALYTICS_EVENT_USER_VOTED_POLL' },
  { no: 27, name: 'ANALYTICS_EVENT_USER_PUBLIC_CHAT' },
  { no: 28, name: 'ANALYTICS_EVENT_USER_PRIVATE_CHAT' },
  { no: 29, name: 'ANALYTICS_EVENT_USER_CHAT_FILES' },
  { no: 30, name: 'ANALYTICS_EVENT_USER_WHITEBOARD_ANNOTATED' },
  { no: 31, name: 'ANALYTICS_EVENT_USER_WHITEBOARD_FILES_ADDED' },
  { no: 32, name: 'ANALYTICS_EVENT_USER_INVISIBLE_INTERFACE' },
  { no: 33, name: 'ANALYTICS_EVENT_USER_RAISE_HAND' },
  { no: 34, name: 'ANALYTICS_EVENT_USER_SPEECH_SERVICES_USAGE' },
  { no: 36, name: 'ANALYTICS_EVENT_USER_SPEECH_SERVICES_STARTED' },
  { no: 37, name: 'ANALYTICS_EVENT_USER_SPEECH_SERVICES_ENDED' },
  { no: 38, name: 'ANALYTICS_EVENT_USER_CONNECTION_QUALITY_EXCELLENT' },
  { no: 39, name: 'ANALYTICS_EVENT_USER_CONNECTION_QUALITY_GOOD' },
  { no: 40, name: 'ANALYTICS_EVENT_USER_CONNECTION_QUALITY_POOR' },
]);

/**
 * @generated from message plugnmeet.AnalyticsDataMsg
 */
export class AnalyticsDataMsg extends Message<AnalyticsDataMsg> {
  /**
   * @generated from field: plugnmeet.AnalyticsEventType event_type = 1;
   */
  eventType = AnalyticsEventType.ROOM;

  /**
   * @generated from field: plugnmeet.AnalyticsEvents event_name = 2;
   */
  eventName = AnalyticsEvents.ANALYTICS_EVENT_UNKNOWN;

  /**
   * it will always use SET
   *
   * @generated from field: optional string event_value_string = 3;
   */
  eventValueString?: string;

  /**
   * it will always use INCRBY
   *
   * @generated from field: optional int64 event_value_integer = 4;
   */
  eventValueInteger?: bigint;

  /**
   * @generated from field: optional string room_id = 5;
   */
  roomId?: string;

  /**
   * @generated from field: optional string room_sid = 6;
   */
  roomSid?: string;

  /**
   * @generated from field: optional string user_id = 7;
   */
  userId?: string;

  /**
   * @generated from field: optional string user_name = 8;
   */
  userName?: string;

  /**
   * @generated from field: optional int64 time = 9;
   */
  time?: bigint;

  constructor(data?: PartialMessage<AnalyticsDataMsg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'plugnmeet.AnalyticsDataMsg';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'event_type',
      kind: 'enum',
      T: proto3.getEnumType(AnalyticsEventType),
    },
    {
      no: 2,
      name: 'event_name',
      kind: 'enum',
      T: proto3.getEnumType(AnalyticsEvents),
    },
    {
      no: 3,
      name: 'event_value_string',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
    {
      no: 4,
      name: 'event_value_integer',
      kind: 'scalar',
      T: 3 /* ScalarType.INT64 */,
      opt: true,
    },
    {
      no: 5,
      name: 'room_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
    {
      no: 6,
      name: 'room_sid',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
    {
      no: 7,
      name: 'user_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
    {
      no: 8,
      name: 'user_name',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
    {
      no: 9,
      name: 'time',
      kind: 'scalar',
      T: 3 /* ScalarType.INT64 */,
      opt: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): AnalyticsDataMsg {
    return new AnalyticsDataMsg().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): AnalyticsDataMsg {
    return new AnalyticsDataMsg().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): AnalyticsDataMsg {
    return new AnalyticsDataMsg().fromJsonString(jsonString, options);
  }

  static equals(
    a: AnalyticsDataMsg | PlainMessage<AnalyticsDataMsg> | undefined,
    b: AnalyticsDataMsg | PlainMessage<AnalyticsDataMsg> | undefined,
  ): boolean {
    return proto3.util.equals(AnalyticsDataMsg, a, b);
  }
}

/**
 * @generated from message plugnmeet.AnalyticsEventData
 */
export class AnalyticsEventData extends Message<AnalyticsEventData> {
  /**
   * @generated from field: string name = 1;
   */
  name = '';

  /**
   * @generated from field: uint32 total = 2;
   */
  total = 0;

  /**
   * @generated from field: repeated string values = 3;
   */
  values: string[] = [];

  constructor(data?: PartialMessage<AnalyticsEventData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'plugnmeet.AnalyticsEventData';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'total', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    {
      no: 3,
      name: 'values',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): AnalyticsEventData {
    return new AnalyticsEventData().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): AnalyticsEventData {
    return new AnalyticsEventData().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): AnalyticsEventData {
    return new AnalyticsEventData().fromJsonString(jsonString, options);
  }

  static equals(
    a: AnalyticsEventData | PlainMessage<AnalyticsEventData> | undefined,
    b: AnalyticsEventData | PlainMessage<AnalyticsEventData> | undefined,
  ): boolean {
    return proto3.util.equals(AnalyticsEventData, a, b);
  }
}

/**
 * @generated from message plugnmeet.AnalyticsRoomInfo
 */
export class AnalyticsRoomInfo extends Message<AnalyticsRoomInfo> {
  /**
   * @generated from field: string room_id = 1;
   */
  roomId = '';

  /**
   * @generated from field: string room_title = 2;
   */
  roomTitle = '';

  /**
   * @generated from field: int64 room_total_users = 3;
   */
  roomTotalUsers = protoInt64.zero;

  /**
   * @generated from field: int64 room_creation = 4;
   */
  roomCreation = protoInt64.zero;

  /**
   * @generated from field: int64 room_ended = 5;
   */
  roomEnded = protoInt64.zero;

  /**
   * @generated from field: int64 room_duration = 6;
   */
  roomDuration = protoInt64.zero;

  /**
   * @generated from field: repeated plugnmeet.AnalyticsEventData events = 9;
   */
  events: AnalyticsEventData[] = [];

  constructor(data?: PartialMessage<AnalyticsRoomInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'plugnmeet.AnalyticsRoomInfo';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'room_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'room_title', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'room_total_users',
      kind: 'scalar',
      T: 3 /* ScalarType.INT64 */,
    },
    {
      no: 4,
      name: 'room_creation',
      kind: 'scalar',
      T: 3 /* ScalarType.INT64 */,
    },
    { no: 5, name: 'room_ended', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    {
      no: 6,
      name: 'room_duration',
      kind: 'scalar',
      T: 3 /* ScalarType.INT64 */,
    },
    {
      no: 9,
      name: 'events',
      kind: 'message',
      T: AnalyticsEventData,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): AnalyticsRoomInfo {
    return new AnalyticsRoomInfo().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): AnalyticsRoomInfo {
    return new AnalyticsRoomInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): AnalyticsRoomInfo {
    return new AnalyticsRoomInfo().fromJsonString(jsonString, options);
  }

  static equals(
    a: AnalyticsRoomInfo | PlainMessage<AnalyticsRoomInfo> | undefined,
    b: AnalyticsRoomInfo | PlainMessage<AnalyticsRoomInfo> | undefined,
  ): boolean {
    return proto3.util.equals(AnalyticsRoomInfo, a, b);
  }
}

/**
 * @generated from message plugnmeet.AnalyticsUserInfo
 */
export class AnalyticsUserInfo extends Message<AnalyticsUserInfo> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = '';

  /**
   * @generated from field: string name = 2;
   */
  name = '';

  /**
   * @generated from field: repeated plugnmeet.AnalyticsEventData events = 3;
   */
  events: AnalyticsEventData[] = [];

  constructor(data?: PartialMessage<AnalyticsUserInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'plugnmeet.AnalyticsUserInfo';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'user_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'events',
      kind: 'message',
      T: AnalyticsEventData,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): AnalyticsUserInfo {
    return new AnalyticsUserInfo().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): AnalyticsUserInfo {
    return new AnalyticsUserInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): AnalyticsUserInfo {
    return new AnalyticsUserInfo().fromJsonString(jsonString, options);
  }

  static equals(
    a: AnalyticsUserInfo | PlainMessage<AnalyticsUserInfo> | undefined,
    b: AnalyticsUserInfo | PlainMessage<AnalyticsUserInfo> | undefined,
  ): boolean {
    return proto3.util.equals(AnalyticsUserInfo, a, b);
  }
}

/**
 * @generated from message plugnmeet.AnalyticsResult
 */
export class AnalyticsResult extends Message<AnalyticsResult> {
  /**
   * @generated from field: plugnmeet.AnalyticsRoomInfo room = 1;
   */
  room?: AnalyticsRoomInfo;

  /**
   * @generated from field: repeated plugnmeet.AnalyticsUserInfo users = 2;
   */
  users: AnalyticsUserInfo[] = [];

  constructor(data?: PartialMessage<AnalyticsResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'plugnmeet.AnalyticsResult';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'room', kind: 'message', T: AnalyticsRoomInfo },
    {
      no: 2,
      name: 'users',
      kind: 'message',
      T: AnalyticsUserInfo,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): AnalyticsResult {
    return new AnalyticsResult().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): AnalyticsResult {
    return new AnalyticsResult().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): AnalyticsResult {
    return new AnalyticsResult().fromJsonString(jsonString, options);
  }

  static equals(
    a: AnalyticsResult | PlainMessage<AnalyticsResult> | undefined,
    b: AnalyticsResult | PlainMessage<AnalyticsResult> | undefined,
  ): boolean {
    return proto3.util.equals(AnalyticsResult, a, b);
  }
}
